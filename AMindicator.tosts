#AMindicator("AlgoTrend Capital Options", overlay=true)
input Source_For_Trigger = close;#tradeSource
def tradeSource = Source_For_Trigger;

input Select_Higher_Timeframe = {default Auto,Manual};#autoTF
def autoTF = Select_Higher_Timeframe;

input If_Manual_Time_Frame_for_Pivots = {"60","90", "120",default "D", "2D", "3D", "4D", "W", "2W", "3W", "4W", "M","2M", "3M", "6M"};#manPivotTF
def manPivotTF = If_Manual_Time_Frame_for_Pivots;

input Near_Strike_Calculation_Source = {default "Traditional Pivot S1/R1","Camarilla Pivot R1/S1","Camarilla Pivot R2/S2","Manual Offset From Central Pivot Point"};#nearStrikeMethod
def nearStrikeMethod = Near_Strike_Calculation_Source;

input Manual_Offset_Value = 0;
def nearStrikeManualOffset = Manual_Offset_Value;

input Determine_Spread = {default Auto,Manual};
def spreadMethod = Determine_Spread;

input Spread_Width_if_Manual = 5.0;
def manSpreadValue = Spread_Width_if_Manual;

input Show_Historical_Strike_Value_Labels = no;
def showHistoricalTradeLabel = Show_Historical_Strike_Value_Labels;

input Show_Historical_Win_Loss_Percentages = yes;
def showHistoricalResults = Show_Historical_Win_Loss_Percentages;

input Extend_Developing_Levels_Into_Future = no;
def showFuture = Extend_Developing_Levels_Into_Future;
#pivotPeriodShift =input.int(defval=1, title=Lookback Period for Pivot, group=Primary Settings)
def pivotPeriodShift = 1;


input Enable_Standard_Alert = no;
def sendStandardAlert = Enable_Standard_Alert;

input Enable_Discord_Webhook_Alert = no;
def sendDiscordWebhookAlert = Enable_Discord_Webhook_Alert;

input Enable_Price_Movement_Into_Different_Zone = no;
def sendPremiumZoneChangeAlert = Enable_Price_Movement_Into_Different_Zone;

input Plot_Traditional_Pivot_R1S1 = no;
def plotTS1R1 = Plot_Traditional_Pivot_R1S1;

input Plot_Traditional_Pivot_R2S2 = no;
def plotTS1R2 = Plot_Traditional_Pivot_R2S2;

input Plot_Traditional_Pivot_R3S3 = no;
def plotTS1R3 = Plot_Traditional_Pivot_R3S3;

input Plot_Camarilla_Pivot_R1S1 = no;
def plotCS1R1 = Plot_Camarilla_Pivot_R1S1;

input Plot_Camarilla_Pivot_R2S2 = no;
def plotCS1R2 = Plot_Camarilla_Pivot_R2S2;

input Plot_Camarilla_Pivot_R3S3 = no;
def plotCS1R3 = Plot_Camarilla_Pivot_R3S3;

input Plot_Camarilla_Pivot_R4S4 = no;
def plotCS1R4 = Plot_Camarilla_Pivot_R4S4;

input Plot_Camarilla_Pivot_R5S5 = no;
def plotCS1R5 = Plot_Camarilla_Pivot_R5S5;

input Mondays = Yes;
def tradeOnMon = Mondays;

input Tuesdays = Yes;
def tradeOnTue = Tuesdays;

input Wednesdays = Yes;
def tradeOnWed = Wednesdays;

input Thursdays = Yes;
def tradeOnThu = Thursdays;

input Fridays = Yes;
def tradeOnFri = Fridays;

def tradeTheDay = true;
def DOW = getDayOfWeek(getYYYYMMDD());
switch (DOW){
    case "1" :
        tradeTheDay = tradeOnMon;
    case "2" : 
        tradeTheDay = tradeOnTue;
    case  "3" :
        tradeTheDay =  tradeOnWed;
    case "4" :
        tradeTheDay =  tradeOnThu;
    default:
        tradeTheDay = tradeOnFri;
}
    


#auto higher time frame
def HTFo = 1;
#timeframe.period??
switch (timeframe) {
    case "1":
        HTFo = 30;
    case "3":
        HTFo = 60;
    case "5":
        HTFo = 240;
    case "15":
        HTFo = D;
    case "30":
        HTFo = D;
    case "45":
        HTFo = D;
    case "60":
        HTFo = W;
    case "120":
        HTFo = W;
    case "180":
        HTFo = W;
    case "240":
        HTFo = W;
    case "1":
        HTFo = 30;
    case "D":
        HTFo = W;
    case "W":
        HTFo = "4W";
    default:
        HTFo = "D";
}



def pivotTF = if autoTF == Auto then HTFo else manPivotTF;


#def devPivotTFHigh = request.security(syminfo.tickerid, pivotTF, high, lookahead=barmerge.lookahead_on)
#devPivotTFLow = request.security(syminfo.tickerid, pivotTF, low, lookahead=barmerge.lookahead_on)
#devPivotTFClose = request.security(syminfo.tickerid, pivotTF, close, lookahead=barmerge.lookahead_on)
#pivotTFHigh = request.security(syminfo.tickerid, pivotTF, high[pivotPeriodShift], lookahead=barmerge.lookahead_on)
#pivotTFLow = request.security(syminfo.tickerid, pivotTF, low[pivotPeriodShift], lookahead=barmerge.lookahead_on)
#pivotTFClose = request.security(syminfo.tickerid, pivotTF, close[pivotPeriodShift], lookahead=barmerge.lookahead_on)
#priorPivotTFHigh = request.security(syminfo.tickerid, pivotTF, high[pivotPeriodShift + 1], lookahead=barmerge.lookahead_on)
#priorPivotTFLow = request.security(syminfo.tickerid, pivotTF, low[pivotPeriodShift + 1], lookahead=barmerge.lookahead_on)
#priorPivotTFClose = request.security(syminfo.tickerid, pivotTF, close[pivotPeriodShift + 1], lookahead=barmerge.lookahead_on)
#pivotLastBar = request.security(syminfo.tickerid, pivotTF, barstate.islast, lookahead=barmerge.lookahead_on)

def RANGE = pivotTFHigh- pivotTFLow;

#CPR Calculations
def centralPivot = (pivotTFHigh + pivotTFLow + pivotTFClose) / 3;
def tempBottomPivot = (pivotTFHigh + pivotTFLow) / 2;
def tempTopPivot =  (centralPivot - tempBottomPivot) + centralPivot;

def bottomPivot = if (tempBottomPivot > tempTopPivot) then tempTopPivot else tempBottomPivot;
topPivot = if(bottomPivot == tempBottomPivot) then tempTopPivot else tempBottomPivot;

cprRange = topPivot - bottomPivot;





#Traditional Pivot Point Calculations
tS1 = 2 * centralPivot - pivotTFHigh;
tS2 = centralPivot - (pivotTFHigh - pivotTFLow);
tS3 = tS1 - (pivotTFHigh - pivotTFLow);
tR1 = 2 * centralPivot - pivotTFLow;
tR2 = centralPivot + (pivotTFHigh - pivotTFLow);
tR3 = tR1 + (pivotTFHigh - pivotTFLow);

#Camarilla Pivot Point Calculations
camR5 = pivotTFHigh / pivotTFLow * pivotTFClose;
camR4 = pivotTFClose + RANGE * 1.1 / 2;
camR3 = pivotTFClose + RANGE * 1.1 / 4;
camR2 = pivotTFClose + RANGE * 1.1 / 6;
camR1 = pivotTFClose + RANGE * 1.1 / 12;
camS1 = pivotTFClose - RANGE * 1.1 / 12;
camS2 = pivotTFClose - RANGE * 1.1 / 6;
camS3 = pivotTFClose - RANGE * 1.1 / 4;
camS4 = pivotTFClose - RANGE * 1.1 / 2;
camS5 = pivotTFClose - (camR5 - pivotTFClose);

#Developing CPR & tR1 & tS1
devCentralPivot = (devPivotTFHigh + devPivotTFLow + devPivotTFClose) / 3;
devTempBottomPivot = (devPivotTFHigh + devPivotTFLow) / 2;
devTempTopPivot =  (devCentralPivot - devTempBottomPivot) + devCentralPivot;

devBottomPivot = if(devTempBottomPivot > devTempTopPivot) then devTempTopPivot else devTempBottomPivot;
devTopPivot = if(devBottomPivot == devTempBottomPivot) then devTempTopPivot else devTempBottomPivot;
devTS1 = 2 * devCentralPivot - devPivotTFHigh;
devTR1 = 2 * devCentralPivot - devPivotTFLow;




#spreadValue Floor & Ceiling
#def spreadValueCalc(calcValue, spreadValue, callOrPutSide) 
#{
    def retValue = 0.00;
    retValue = if(callOrPutSide == "Call") then (math.ceil(calcValue/spreadValue)) * spreadValue;
    retValue =  if(callOrPutSide == "Put") then (math.floor(calcValue/spreadValue)) * spreadValue;
    #}   
#Strike Values
if(spreadMethod == "Auto")
{
    if(close >= 1000)
        {spreadValue = 50.0;}
    else if(close >=500)
        {spreadValue = 10.0;}
    else if(close >=100)
        {spreadValue = 5.0;}
    else if(close >=50)
        {spreadValue = 2.5;}
    else if(close >=20)
        {spreadValue = 1;}
    else if(close < 20)
        {spreadValue = 0.5;}
    else
        {spreadValue = 0;}
}
else
{
    spreadValue = manSpreadValue;
}
if(nearStrikeMethod == "Traditional Pivot S1/R1")
    {callTriggerValue = tS1;}
else
{
    if(nearStrikeMethod == "Camarilla Pivot R1/S1")
        {callTriggerValue = camS1;}
    else if(nearStrikeMethod == "Camarilla Pivot R2/S2")
        {callTriggerValue = camS2;}
    else
        {callTriggerValue = centralPivot;}
}

if(nearStrikeMethod == "Traditional Pivot S1/R1")
{
    putTriggerValue = tR1;
}
else
{
    if(nearStrikeMethod == "Camarilla Pivot R1/S1")
        {putTriggerValue = camR1;}
    else if(nearStrikeMethod == "Camarilla Pivot R2/S2")
        {putTriggerValue = camR1;}
    else
        {putTriggerValue = centralPivot;}
}

if(nearStrikeMethod == "Traditional Pivot S1/R1")
{
    callNearStrikeSource = math.max(pivotTFHigh,tR1);
}
else
{
    if(nearStrikeMethod == "Camarilla Pivot R1/S1")
        {callNearStrikeSource = math.max(pivotTFHigh,camR1);}
    else if(nearStrikeMethod == "Camarilla Pivot R2/S2")
        {putTriggerValue = math.max(pivotTFHigh,camR2);}
    else
        {putTriggerValue = centralPivot + nearStrikeManualOffset;}
}

if(nearStrikeMethod == "Traditional Pivot S1/R1")
{
    putNearStrikeSource = math.min(pivotTFLow,tS1);
}
else
{
    if(nearStrikeMethod == "Camarilla Pivot R1/S1")
        {putNearStrikeSource = math.max(pivotTFLow,camS1);}
    else if(nearStrikeMethod == "Camarilla Pivot R2/S2")
        {putTriggerValue = math.max(pivotTFLow,camS2);}
    else
        {putTriggerValue = centralPivot - nearStrikeManualOffset;}
}

calcCallValue = if(close < callTriggerValue) then topPivot else math.avg(centralPivot, callNearStrikeSource);
callStrikeValue = spreadValueCalc(calcCallValue,spreadValue, 'Call');
callStrikeValue2 = callStrikeValue + spreadValue;
calcPutValue =  if(close > putTriggerValue) then bottomPivot else math.avg(centralPivot, putNearStrikeSource);
putStrikeValue =  spreadValueCalc(calcPutValue, spreadValue, 'Put');
putStrikeValue2 = putStrikeValue - spreadValue;
icCallStrikeValue = spreadValueCalc(tR1,spreadValue, 'Call');
icCallStrikeValue2 = icCallStrikeValue + spreadValue;
icPutStrikeValue = spreadValueCalc(tS1, spreadValue, 'Put');
icPutStrikeValue2 = icPutStrikeValue - spreadValue;

#Tomorrow's Strikes
calcDevCallValue = if(close < devTS1) then devTopPivot else math.avg(devCentralPivot, math.max(devPivotTFHigh, devTR1));
calcDevPutValue =  if(close > devTR1) then devBottomPivot else math.avg(devCentralPivot, math.min(devPivotTFLow, devTS1));
devCallStrikeValue = spreadValueCalc(calcDevCallValue, spreadValue, 'Call');
devPutStrikeValue =  spreadValueCalc(calcDevPutValue, spreadValue, 'Put');


plot(callStrikeValue, "Current Call", style=plot.style_line, color=color.new(color.orange, 75));
plot(putStrikeValue, "Current Put", style=plot.style_line, color=color.new(color.orange, 75));

plot(devCallStrikeValue, "Developing Call", style=plot.style_line, color=color.new(color.yellow, 95))
plot(devPutStrikeValue, "Developing Put", style=plot.style_line, color=color.new(color.yellow, 95))
plot(devTopPivot, "Developing Top Pivot", style=plot.style_line, color=color.new(color.blue, 95))
plot(devCentralPivot, "Developing Central Pivot", style=plot.style_line, color=color.new(color.purple, 95))
plot(devBottomPivot, "Developing Bottom Pivot", style=plot.style_line, color=color.new(color.blue, 95))


//Plots
//Central Pivot Range
plot(topPivot, "CP Top", style=plot.style_circles)
plot(centralPivot, "Central Pivot", style=plot.style_cross, linewidth=2, color=color.orange)
plot(bottomPivot, "CP Bottom", style=plot.style_circles)

//Traditional Pivots
plot(plotTS1R1 ? tR1 : na, "tR1", style=plot.style_circles, color=color.red)
plot(plotTS1R1 ? tS1 : na, "tS1", style=plot.style_circles, color=color.green)
plot(plotTS2R2 ? tR2 : na, "tR2", style=plot.style_circles, color=color.new(color.red, 30))
plot(plotTS2R2 ? tS2 : na, "tS2", style=plot.style_circles, color=color.new(color.green, 30))
plot(plotTS3R3 ? tR3 : na, "tR3", style=plot.style_circles, color=color.new(color.red, 60))
plot(plotTS3R3 ? tS3 : na, "tS3", style=plot.style_circles, color=color.new(color.green, 60))

//
plot(plotCS3R3 ? camR3 : na, "cR3",style=plot.style_line, color=color.red)
plot(plotCS3R3 ? camS3 : na, "cS3", style=plot.style_line, color=color.green)
plot(plotCS1R1 ? camR1 : na, "cR1",style=plot.style_line, color=color.new(color.red, 75))
plot(plotCS1R1 ? camS1 : na, "cS1", style=plot.style_line, color=color.new(color.green, 75))
plot(plotCS2R2 ? camR2 : na, "cR2",style=plot.style_line, color=color.new(color.red, 90))
plot(plotCS2R2 ? camS2 : na, "cS2", style=plot.style_line, color=color.new(color.green, 90))
plot(plotCS4R4 ? camR4 : na, "cR4",style=plot.style_line, color=color.new(color.red, 25))
plot(plotCS4R4 ? camS4 : na, "cS4", style=plot.style_line, color=color.new(color.green, 25))
plot(plotCS5R5 ? camR5 : na, "cR5",style=plot.style_line, color=color.new(color.red, 90))
plot(plotCS5R5 ? camS5 : na, "cS5", style=plot.style_line, color=color.new(color.green, 90))


//New Bar
is_newbar(res, sess) =>
    t = time(res, sess)
    na(t[1]) and not na(t) or t[1] < t


openingBarClosed = is_newbar(pivotTF, session.regular)[1]
openingBarOpen = is_newbar(pivotTF, session.regular)


//Trade Calculations
string tradeType = switch
    tradeSource > topPivot => "Sell Put"
    tradeSource < bottomPivot => "Sell Call"
    (tradeSource < topPivot and tradeSource > bottomPivot) => "Sell IC"

def tradeDecision = "No Trade"
def strikeValue = 0.00
def strikeValue2 = 0.00
def yPlacement = 0.00
def labelStyle = label.style_label_lower_right

def tradeLabelText = "None"
def alertText ="None"

if openingBarClosed and tradeTheDay
    tradeDecision := tradeType[1]
    strikeValue :=
         tradeDecision == "Sell Put" ? putStrikeValue :
         tradeDecision == "Sell Call" ? callStrikeValue :
         tradeDecision == "Sell IC" ? icCallStrikeValue : na
    strikeValue2 :=
         tradeDecision == "Sell Put" ? putStrikeValue2 :
         tradeDecision == "Sell Call" ? callStrikeValue2 :
         tradeDecision == "Sell IC" ? icPutStrikeValue : na

    tradeLabelText := tradeDecision + ' for ' + str.tostring(strikeValue, '#.##')
    yPlacement :=
         tradeDecision == "Sell Put" ? putStrikeValue :
         tradeDecision == "Sell Call" ? callStrikeValue :
         tradeDecision == "Sell IC" ? icCallStrikeValue : na
    labelStyle :=
         tradeDecision == "Sell Put" ? label.style_label_upper_left:
         tradeDecision == "Sell Call" ? label.style_label_lower_left:
         tradeDecision == "Sell IC" ?  label.style_label_lower_left: label.style_label_lower_left

   
    alertText :=
         tradeDecision == "Sell Put" ?
             "Sell Put Strike " + str.tostring(strikeValue, '#.##') + " | " +
             "Buy Put Strike " + str.tostring(strikeValue2, '#.##')  :
         tradeDecision == "Sell Call" ?
             "Sell Call Strike " + str.tostring(strikeValue, '#.##') + " | " +
             "Buy Call Strike " + str.tostring(strikeValue2, '#.##')  :
         tradeDecision == "Sell IC" ?
             "IC | Sell Call Strike " + str.tostring(icCallStrikeValue, '#.##') + " | " +
             "Buy Call Strike " + str.tostring(icCallStrikeValue2, '#.##') + " | " +
             "Sell Put Strike " + str.tostring(icPutStrikeValue, '#.##') + " | " +
             "Buy Put Strike " + str.tostring(icPutStrikeValue2, '#.##') : na
             
    if showHistoricalTradeLabel or pivotLastBar
        label.new(x=bar_index, y=yPlacement, color=color.new(color.blue,50),
             textcolor=color.white, size=size.small,
             style=labelStyle,
             text=alertText)
   
    alertText := "Ticker:  " + syminfo.ticker + " - " + alertText

plot((tradeTheDay and not openingBarOpen) ? strikeValue : na, "Strike Value", color=color.white, style=plot.style_linebr)

//Prior Day Trade Result
def wins = 0
def losses = 0

def callWins = 0
def callLosses = 0
def icWins = 0
def icLosses = 0
def putWins = 0
def putLosses = 0
def callCount = 0
def icCount = 0
def putCount = 0
def tradeResult = "No Trade"


if openingBarOpen and tradeTheDay[1]
    if tradeDecision == "Sell Put"
        wins := close[1] > strikeValue ? wins + 1 : wins
        losses := close[1] < strikeValue ? losses + 1 : losses
        tradeResult := close[1] > strikeValue ? "Win" : "Loss"
        putWins := close[1] > strikeValue ? putWins + 1 : putWins
        putLosses := close[1] < strikeValue ? putLosses + 1 : putLosses
        putCount := putCount + 1
    if tradeDecision == "Sell Call"
        wins := close[1] < strikeValue ? wins + 1 : wins
        losses := close[1] > strikeValue ? losses + 1 : losses
        tradeResult := close[1] < strikeValue ? "Win" : "Loss"
        callWins := close[1] < strikeValue ? callWins + 1 : callWins
        callLosses := close[1] > strikeValue ? callLosses + 1 : callLosses
        callCount := callCount + 1
    if tradeDecision == "Sell IC"
        wins := (close[1] > strikeValue2 and close[1] < strikeValue) ? wins + 1 : wins
        losses := (close[1] < strikeValue2 or close[1] > strikeValue) ? losses + 1 : losses
        tradeResult := (close[1] > strikeValue2 and close[1] < strikeValue) ? "Win" : "Loss"
        icWins := (close[1] > strikeValue2 and close[1] < strikeValue) ? icWins + 1 : icWins
        icLosses := (close[1] < strikeValue2 or close[1] > strikeValue) ? icLosses + 1 : icLosses
        icCount := icCount + 1
       
    label.new(x=bar_index -1, y=yPlacement, color=color.new(tradeResult == "Win" ? color.green : color.red,50),
         textcolor=color.white, size=size.small,
         style=labelStyle,
         text=tradeResult)


// Results & Current Trade

string premiumValue = switch
    (strikeValue < bottomPivot and close < bottomPivot) or
     (strikeValue > topPivot and close > topPivot) => "Optimal (Hedge)"
    (strikeValue < bottomPivot and close < centralPivot) or
     (strikeValue > topPivot and close > centralPivot) => "Good"
    (strikeValue < bottomPivot and close < topPivot) or
     (strikeValue > topPivot and close > bottomPivot) => "Decent"
    => "Standard"


def table resultsDisplay = table.new(position.bottom_right, 4, 5)
def table currentSetup = table.new(position.top_right, 2, 3)
if barstate.islast
    def tfLabelText ="nothing"
    tfLabelText := '----Current Setup----\n\n'
    tfLabelText := tfLabelText + 'Pivot Timeframe: ' + pivotTF
    tfLabelText := tfLabelText + '\n' + tradeLabelText
    table.cell(currentSetup, 0, 0, 'Pivot TF', text_color=color.white)
    table.cell(currentSetup, 1, 0, pivotTF, text_color=color.white)
    table.cell(currentSetup, 0, 1, tradeDecision, text_color=color.white)
    table.cell(currentSetup, 1, 1, str.tostring(strikeValue, '#.##'), text_color=color.white)
    table.cell(currentSetup, 0, 2, 'Timing', text_color=color.white)
    table.cell(currentSetup, 1, 2, premiumValue, text_color=color.white)
 
    //Plot Future Values
    if showFuture
        futureCall = line.new(x1=bar_index, y1=devCallStrikeValue, x2=bar_index + 5, y2=devCallStrikeValue, color = color.gray, extend=extend.right)
        futurePut = line.new(x1=bar_index, y1=devPutStrikeValue, x2=bar_index + 5, y2=devPutStrikeValue, color = color.gray, extend=extend.right)
        futureTopPivot = line.new(x1=bar_index, y1=devTopPivot, x2=bar_index + 5, y2=devTopPivot, color = color.blue, extend=extend.right)
        futureCentralPivot = line.new(x1=bar_index, y1=devCentralPivot, x2=bar_index + 5, y2=devCentralPivot, color = color.purple, extend=extend.right)
        futureBottomPivot = line.new(x1=bar_index, y1=devBottomPivot, x2=bar_index + 5, y2=devBottomPivot, color = color.blue, extend=extend.right)
       
       
        line.delete(futureCall[1])
        line.delete(futurePut[1])
        line.delete(futureTopPivot[1])
        line.delete(futureCentralPivot[1])
        line.delete(futureBottomPivot[1])

   
    // We only populate the table on the last bar.
    if showHistoricalResults
        table.cell(resultsDisplay, 1, 0, 'Trades', text_color=color.white)
        table.cell(resultsDisplay, 2, 0, 'Wins', text_color=color.white)
        table.cell(resultsDisplay, 3, 0, 'Win %', text_color=color.white)
        table.cell(resultsDisplay, 0, 1, 'All', text_color=color.white)
        table.cell(resultsDisplay, 1, 1, str.tostring(wins+losses, '#'), text_color=color.white)
        table.cell(resultsDisplay, 2, 1, str.tostring(wins, '#'), text_color=color.white)
        table.cell(resultsDisplay, 3, 1, str.tostring(wins/(wins+losses)*100, '#.#') , text_color=color.white)
        table.cell(resultsDisplay, 0, 2, 'Calls', text_color=color.white)
        table.cell(resultsDisplay, 1, 2, str.tostring(callWins + callLosses, '#'), text_color=color.white)
        table.cell(resultsDisplay, 2, 2, str.tostring(callWins, '#') , text_color=color.white)
        table.cell(resultsDisplay, 3, 2, str.tostring(callWins/(callWins+callLosses)*100, '#.#') , text_color=color.white)
        table.cell(resultsDisplay, 0, 3, 'Puts', text_color=color.white)
        table.cell(resultsDisplay, 1, 3, str.tostring(putWins + putLosses, '#'), text_color=color.white)
        table.cell(resultsDisplay, 2, 3, str.tostring(putWins, '#') , text_color=color.white)
        table.cell(resultsDisplay, 3, 3, str.tostring(putWins/(putWins + putLosses)*100, '#.#') , text_color=color.white)
        table.cell(resultsDisplay, 0, 4, 'ICs', text_color=color.white)
        table.cell(resultsDisplay, 1, 4, str.tostring(icWins + icLosses, '#'), text_color=color.white)
        table.cell(resultsDisplay, 2, 4, str.tostring(icWins, '#') , text_color=color.white)
        table.cell(resultsDisplay, 3, 4, str.tostring(icWins/(icWins + icLosses)*100, '#.#') , text_color=color.white)
       
//Alerts

sendAlert = close < 6000

webHookAlertMessage = '{\"content\":\"' + alertText + '\"}'

//{"content":"{{ticker}} Long Entry Triggered | Open:  {{open}} | Close:  {{close}} | Low:  {{low}} |High:  {{high}}"}




if (sendDiscordWebhookAlert and openingBarClosed)
    alert(webHookAlertMessage, alert.freq_once_per_bar)

premiumZoneChange =
     (premiumValue == "Optimal (Hedge)" and premiumValue[1]!= "Optimal (Hedge)")
     or
     (premiumValue == "Good" and (premiumValue[1] != "Optimal (Hedge)" and premiumValue[1] != "Good"))
     or
     (premiumValue == "Decent" and
         (premiumValue[1] != "Optimal (Hedge)" and premiumValue[1] != "Good" and premiumValue[1] != "Decent"))

if premiumZoneChange and sendPremiumZoneChangeAlert
    alert(syminfo.ticker + " Premium Zone has changed to " + premiumValue, alert.freq_once_per_bar)